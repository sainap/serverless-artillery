const BbPromise = require('bluebird')
const idioms = require('../idioms')
const path = require('path')
const yaml = require('js-yaml')
const fs = require('fs')
const scriptPath = __dirname + '/load_script.yml'

const baseScript = idioms.parseInput(scriptPath)
const basic = idioms.phaseUpdate(baseScript, {})
const horizontal_test = idioms.phaseUpdate(baseScript, {"duration": 20, "arrivalRate": 5})
const vertical_test = idioms.phaseUpdate(baseScript, {"duration": 2, "arrivalRate": 50})
const horizontal_and_vertical = idioms.phaseUpdate(baseScript, {"duration": 20, "arrivalRate": 50})

// TODO: fix repetition of .then()s
// TODO: Make a final report show up with all that went wrong
module.exports = () => idioms.runIn(__dirname, () => BbPromise.resolve()
  .then(idioms.functionDoesNotExist())
  .then(() => BbPromise.resolve()
    .then(idioms.deploy())
    .then(idioms.functionExists())
    .then(idioms.invoke({ "data" : JSON.stringify(basic)}))
    .then(idioms.expect({ aggregate: { scenariosCreated: 10 } }))
    .finally(idioms.remove())
    .then(idioms.functionDoesNotExist()))
  // .then(idioms.functionDoesNotExist())
  // .then(() => BbPromise.resolve()
  //   .then(idioms.deploy())
  //   .then(idioms.functionExists())
  //   .then(idioms.invoke({ "data" : JSON.stringify(horizontal_test)}))
  //   .then(idioms.expect({ aggregate: { scenariosCreated: 100 } }))
  //   .finally(idioms.remove())
  //   .then(idioms.functionDoesNotExist()))
  // .then(idioms.functionDoesNotExist())
  // .then(() => BbPromise.resolve()
  //   .then(idioms.deploy())
  //   .then(idioms.functionExists())
  //   .then(idioms.invoke({ "data" : JSON.stringify(vertical_test)}))
  //   .then(idioms.expect({ aggregate: { scenariosCreated: 100 } }))
  //   .finally(idioms.remove())
  //   .then(idioms.functionDoesNotExist()))
  // .then(idioms.functionDoesNotExist())
  // .then(() => BbPromise.resolve()
  //   .then(idioms.deploy())
  //   .then(idioms.functionExists())
  //   .then(idioms.invoke({ "data" : JSON.stringify(horizontal_and_vertical)}))
  //   .then(idioms.expect({ aggregate: { scenariosCreated: 1000 } }))
  //   .finally(idioms.remove())
  //   .then(idioms.functionDoesNotExist()))
  )
